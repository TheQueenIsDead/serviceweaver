// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: director.proto

package director

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DirectorServiceClient is the client API for DirectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectorServiceClient interface {
	GetDirectorById(ctx context.Context, in *GetDirectorByIdRequest, opts ...grpc.CallOption) (*GetDirectorResponse, error)
}

type directorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectorServiceClient(cc grpc.ClientConnInterface) DirectorServiceClient {
	return &directorServiceClient{cc}
}

func (c *directorServiceClient) GetDirectorById(ctx context.Context, in *GetDirectorByIdRequest, opts ...grpc.CallOption) (*GetDirectorResponse, error) {
	out := new(GetDirectorResponse)
	err := c.cc.Invoke(ctx, "/api.DirectorService/GetDirectorById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectorServiceServer is the server API for DirectorService service.
// All implementations should embed UnimplementedDirectorServiceServer
// for forward compatibility
type DirectorServiceServer interface {
	GetDirectorById(context.Context, *GetDirectorByIdRequest) (*GetDirectorResponse, error)
}

// UnimplementedDirectorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDirectorServiceServer struct {
}

func (UnimplementedDirectorServiceServer) GetDirectorById(context.Context, *GetDirectorByIdRequest) (*GetDirectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectorById not implemented")
}

// UnsafeDirectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectorServiceServer will
// result in compilation errors.
type UnsafeDirectorServiceServer interface {
	mustEmbedUnimplementedDirectorServiceServer()
}

func RegisterDirectorServiceServer(s grpc.ServiceRegistrar, srv DirectorServiceServer) {
	s.RegisterService(&DirectorService_ServiceDesc, srv)
}

func _DirectorService_GetDirectorById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDirectorByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServiceServer).GetDirectorById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DirectorService/GetDirectorById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServiceServer).GetDirectorById(ctx, req.(*GetDirectorByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DirectorService_ServiceDesc is the grpc.ServiceDesc for DirectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.DirectorService",
	HandlerType: (*DirectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDirectorById",
			Handler:    _DirectorService_GetDirectorById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "director.proto",
}
